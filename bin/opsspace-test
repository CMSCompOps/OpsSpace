#! /bin/bash

#
# Author: Daniel Abercrombie <dabercro@mit.edu>
#

errorsfound=0

if [ -z $package ] && [ ! -z $(find * -maxdepth 1 -name __init__.py) ]
then
    package=$(dirname $(find * -maxdepth 1 -name __init__.py))
fi

# Get the python version
#   26 for Python 2.6
#   27 for Python 2.7
# and so on
pyvers=$(python --version 2>&1 | perl -ne '/\b(\d)\.(\d+)\./ && print "$1$2"')

# If versioned file not here, fall back to requirements.txt
# Get the full path to the test requirements file
reqfile=$(pwd)/test/requirements$(test -f test/requirements${pyvers}.txt && echo ${pyvers}).txt


# Function to do the test for us
_do_test () {

    packagetest="$1"                      # Setup the test to be done

    eval $packagetest                     # Do the test
    errorcode=$?                          # Get the error code

    if [ $errorcode -ne 0 ]               # If failed tell user, and increase error count
    then

        tput setaf 1 2> /dev/null
        echo "$packagetest exited with error code $errorcode!"
        errorsfound=$((errorsfound + 1))

    else                                  # If passed, tell for fun too

        tput setaf 2 2> /dev/null
        echo "$packagetest passed!"

    fi

    tput sgr0 2> /dev/null                # Reset colors

}


_doc_test () {

    # Check if we should test build Sphinx documentation
    if [ -f docs/conf.py ] && [ "$nodoc" != "true" ] && [ "$pyvers" != "26" ]
    then

        test -f docs/requirements.txt && pip install -r docs/requirements.txt
        _do_test "sphinx-build -W -b html -E docs test/html"

    fi

}


_unit_test () {

    # Install requirements, if they exist
    test -f $reqfile && pip install -r $reqfile

    # Now do the tests inside the test directory
    cd test

    if grep coverage $reqfile
    then

        docoverage=1
        # Remove any old .coverage file
        test ! -f .coverage || rm .coverage

    fi


    # Run the test for all files that start with "test_". They should be executable.
    for packagetest in test_*[^~]
    do

        # Run the coverage on top of the unit tests
        if [ ! -z $docoverage ] && [ "${packagetest##*.}" == "py" ]
        then

            _do_test "coverage run --source ${cover:-$package} -a $packagetest"

        else 

            _do_test "./$packagetest"

        fi

    done


    if [ ! -z $docoverage ]
    then

        coverage report

    fi


    cd -

}


_style_test () {

    # Check for pylint in test requirements, and run test if desired
    if grep pylint $reqfile
    then

        # This exits 0 when the pylint version is old, and we have to disable the extensions
        if pylint --version 2> /dev/null | perl -ne '/pylint\s(\d+.\d+)/ && exit($1 > 1.3)'
        then

            lintfilter='s/load-plugins/#/'

        fi

        # PyLint Config is towards the bottom of this file
        # It's used as default when local pylint.cfg does not exist
        if [ ! -f test/pylint.cfg ]
        then

            perl -0ne '/PyLint Config\n(\-+)\n(.*)\n\1/sm && print $2' $0 > test/pylint.cfg
            plseraselintcfg=1

        fi

        _do_test "pylint --rcfile=<(sed '$lintfilter' test/pylint.cfg) $package"

        # If PyLint file was created, get rid of it unless asked to be kept
        test -z $plseraselintcfg || test ! -z $keepcfg || rm test/pylint.cfg

    fi

}


_twine_test () {

    if [ -f setup.py ] && [ "$pyvers" != "26" ]
    then

        pip install twine
        python setup.py sdist

        _do_test "twine check dist/$(ls -tr dist | tail -n1)"

    fi

}


if [ -z $1 ]
then
    actions="docs unit style twine"
else
    actions=$@
fi

for action in $actions
do

    if [ "$action" != "help" ] && [ ! -d test ]
    then
        echo 'Needs to called in root of package (outside "test" directory).'
        exit 11
    fi

    case $action in
        "help")
            perldoc -Tt $0
            exit 0
            ;;
        "docs")
            _doc_test
            ;;
        "unit")
            _unit_test
            ;;
        "style")
            _style_test
            ;;
        "twine")
            _twine_test
            ;;
        *)
            echo "Don't recognize action '$action'"
            echo "Try '$0 help'"
            ;;
    esac

done


if [ $errorsfound -eq 1 ]                 # Setting plural correctly
then                                      #   looks impressive to some
    errstr="error"
else
    errstr="errors"
fi

if [ $errorsfound -eq 0 ]                 # Set terminal text color depending on result
then
    tput setaf 2 2> /dev/null             # Green: Passed test
else
    tput setaf 1 2> /dev/null             # Red: Did not pass test
fi

echo "$errorsfound $errstr found"

tput sgr0 2> /dev/null                    # Reset color

exit $errorsfound

=pod

The script ``opsspace-test`` will run a set of tests, as described below.
It assumes a particular project directory structure that looks like the following:

  .
  |-- setup.py
  |-- packagename
  |   |-- __init__.py
  |   `-- ...
  |-- test
  |   |-- requirements.txt  (optional)
  |   |-- pylint.cfg        (optional)
  |   |-- test_*
  |   `-- ...
  `-- docs
      |-- requirements.txt  (optional)
      |-- conf.py
      `-- ...

``opsspace-test`` must be run in the root directory of such a project.  

The script can be run with two different ways of configuring behavior.
The first way is to specify which tests are run.
The other way is to set certain environment variables.

=head1 Test Names

A subset of tests can be run.
This is done by selecting from the tests below and adding them as arguments to this script.
If no arguments are given, all of the following tests are run.

  - **docs** - This test does nothing if the Python version is 2.6.
    This is because Python 2.6 is not supported in Sphinx.
    This test is also skipped if the **nodoc** environment variable is set.
    Otherwise, this script looks in the local ``docs`` directory and installs any ``requirements.txt`` file found.
    (This is a good place to keep packages that are used to build documentation.)
    Then ``sphinx-build`` is run over the local ``docs`` directory.
    Any warning are considered errors, so this test will fail on documentation warnings.
  - **unit** - This runs over all of the executables that match the name ``test/test_*``.
    Before running those, it also installs any ``test/requirements.txt`` file that exists locally.
    If you need different requirements for Python 2.6, you can also create a file ``test/requirements26.txt``, and so on.
    The number of tests that fail are counted and reported at the end of the ``opsspace-test`` run.
    If the ``coverage`` package is listed in the used requirements file and the test is a python script,
    ``coverage`` is used to run the test script.
    At the end of the **unit** portion of the test, a coverage table will be printed.
    ``copy-coverage-html`` can be used to create and place the coverage information to be displayed on a web page.
  - **style** - This runs PyLint over the local Python package if ``pylint``
    is listed in the requirements file used in the **unit** test.
    This package name is determined as described under the **package** environment variable below.
    Usually, the correct package is found though.
    This PyLint check uses a default configuration that is found at the end of the ``opsspace-test`` script itself.
    If you wish to use a different PyLint configuration file, create a local ``test/pylint.cfg`` in your repository and
    ``opsspace-test`` will use that instead.
  - **twine** - This test does nothing if the Python version is 2.6.
    Otherwise, if a local ``setup.py`` file exists, this test will create a tarball for uploading to PyPI.
    It will then run ``twine check`` over the tarball.

The final exit code of the ``opsspace-test`` is how many of the tests above fail.
This means that it is easy to catch failing tests with Travis-CI, Jenkins, etc.

=head1 Environment Variables

Behavior is also modified by setting the following environment variables.

  - **package**: This should be the directory that the python source files are inside.
    This is used by the ``style`` test to determine what to run PyLint on.
    It is also used for renaming coverage results.
    If not set, it is determined by searching for an ``__init__.py`` file.
  - **nodoc**: If set, the ``docs`` test is skipped, even if the Python version is appropriate.

=cut

PyLint Config
-------------

[MASTER]

# Add files or directories matching the regex patterns to the blacklist. The
# regex matches against base names, not paths.
ignore-patterns=

# Pickle collected data for later comparisons.
persistent=yes

# List of plugins (as comma separated values of python modules names) to load,
# usually to register additional checkers.
load-plugins=pylint.extensions.docparams,pylint.extensions.mccabe

# Use multiple processes to speed up Pylint.
jobs=1

# Allow loading of arbitrary C extensions. Extensions are imported into the
# active Python interpreter and may run arbitrary code.
unsafe-load-any-extension=no

# A comma-separated list of package or module names from where C extensions may
# be loaded. Extensions are loading into the active Python interpreter and may
# run arbitrary code
extension-pkg-whitelist=

[MESSAGES CONTROL]

# Only show warnings with the listed confidence levels. Leave empty to show
# all. Valid levels: HIGH, INFERENCE, INFERENCE_FAILURE, UNDEFINED
confidence=

# Enable the message, report, category or checker with the given id(s). You can
# either give multiple identifier separated by comma (,) or put this option
# multiple time (only on the command line, not in the configuration file where
# it should appear only once). See also the "--disable" option for examples.
#enable=

# Disable the message, report, category or checker with the given id(s). You
# can either give multiple identifiers separated by comma (,) or put this
# option multiple times (only on the command line, not in the configuration
# file where it should appear only once).You can also use "--disable=all" to
# disable everything first and then reenable specific checks. For example, if
# you want to run only the similarities checker, you can use "--disable=all
# --enable=similarities". If you want to run only the classes checker, but have
# no Warning level messages displayed, use"--disable=all --enable=classes
# --disable=W"
disable=bad-option-value,old-octal-literal,oct-method,print-statement,unpacking-in-except,parameter-unpacking,backtick,old-raise-syntax,old-ne-operator,long-suffix,dict-view-method,dict-iter-method,metaclass-assignment,next-method-called,raising-string,indexing-exception,raw_input-builtin,long-builtin,file-builtin,execfile-builtin,coerce-builtin,cmp-builtin,buffer-builtin,basestring-builtin,apply-builtin,filter-builtin-not-iterating,using-cmp-argument,useless-suppression,range-builtin-not-iterating,suppressed-message,no-absolute-import,old-division,cmp-method,reload-builtin,zip-builtin-not-iterating,intern-builtin,unichr-builtin,reduce-builtin,standarderror-builtin,unicode-builtin,xrange-builtin,coerce-method,delslice-method,getslice-method,setslice-method,input-builtin,round-builtin,hex-method,nonzero-method,map-builtin-not-iterating,no-name-in-module,broad-except,no-member,star-args,useless-object-inheritance,unnecessary-pass


[REPORTS]

# Set the output format. Available formats are text, parseable, colorized, msvs
# (visual studio) and html. You can also give a reporter class, eg
# mypackage.mymodule.MyReporterClass.
output-format=text

# Tells whether to display a full report or only the messages
reports=no

# Python expression which should return a note less than 10 (10 is the highest
# note). You have access to the variables errors warning, statement which
# respectively contain the number of errors / warnings messages and the total
# number of statements analyzed. This is used by the global evaluation report
# (RP0004).
evaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)

# Template used to display messages. This is a python new-style format string
# used to format the message information. See doc for all details
#msg-template=


[BASIC]

# Good variable names which should always be accepted, separated by a comma
good-names=i,j,k,ex,Run,_

# Bad variable names which should always be refused, separated by a comma
bad-names=foo,bar,baz,toto,tutu,tata

# Colon-delimited sets of names that determine each other's naming style when
# the name regexes allow several styles.
name-group=

# Include a hint for the correct naming format with invalid-name
include-naming-hint=no

# List of decorators that produce properties, such as abc.abstractproperty. Add
# to this list to register other decorators that produce valid properties.
property-classes=abc.abstractproperty

# Regular expression matching correct function names
function-rgx=[a-z_][a-z0-9_]{2,30}$

# Naming hint for function names
function-name-hint=[a-z_][a-z0-9_]{2,30}$

# Regular expression matching correct variable names
variable-rgx=[a-z_][a-z0-9_]{2,30}$

# Naming hint for variable names
variable-name-hint=[a-z_][a-z0-9_]{2,30}$

# Regular expression matching correct constant names
const-rgx=(([A-Z_][A-Z0-9_]*)|(__.*__))$

# Naming hint for constant names
const-name-hint=(([A-Z_][A-Z0-9_]*)|(__.*__))$

# Regular expression matching correct attribute names
attr-rgx=[a-z_][a-z0-9_]{2,30}$

# Naming hint for attribute names
attr-name-hint=[a-z_][a-z0-9_]{2,30}$

# Regular expression matching correct argument names
argument-rgx=[a-z_][a-z0-9_]{2,30}$

# Naming hint for argument names
argument-name-hint=[a-z_][a-z0-9_]{2,30}$

# Regular expression matching correct class attribute names
class-attribute-rgx=([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$

# Naming hint for class attribute names
class-attribute-name-hint=([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$

# Regular expression matching correct inline iteration names
inlinevar-rgx=[A-Za-z_][A-Za-z0-9_]*$

# Naming hint for inline iteration names
inlinevar-name-hint=[A-Za-z_][A-Za-z0-9_]*$

# Regular expression matching correct class names
class-rgx=[A-Z_][a-zA-Z0-9]+$

# Naming hint for class names
class-name-hint=[A-Z_][a-zA-Z0-9]+$

# Regular expression matching correct module names
module-rgx=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$

# Naming hint for module names
module-name-hint=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$

# Regular expression matching correct method names
method-rgx=[a-z_][a-z0-9_]{2,30}$

# Naming hint for method names
method-name-hint=[a-z_][a-z0-9_]{2,30}$

# Regular expression which should only match function or class names that do
# not require a docstring.
no-docstring-rgx=^_

# Minimum line length for functions/classes that require docstrings, shorter
# ones are exempt.
docstring-min-length=-1


[ELIF]

# Maximum number of nested blocks for function / method body
max-nested-blocks=5


[FORMAT]

# Maximum number of characters on a single line.
max-line-length=100

# Regexp for a line that is allowed to be longer than the limit.
ignore-long-lines=^\s*(# )?<?https?://\S+>?$

# Allow the body of an if to be on the same line as the test if there is no
# else.
single-line-if-stmt=no

# List of optional constructs for which whitespace checking is disabled. `dict-
# separator` is used to allow tabulation in dicts, etc.: {1  : 1,\n222: 2}.
# `trailing-comma` allows a space between comma and closing bracket: (a, ).
# `empty-line` allows space-only lines.
no-space-check=trailing-comma,dict-separator

# Maximum number of lines in a module
max-module-lines=1000

# String used as indentation unit. This is usually "    " (4 spaces) or "\t" (1
# tab).
indent-string='    '

# Number of spaces of indent required inside a hanging  or continued line.
indent-after-paren=4

# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.
expected-line-ending-format=


[LOGGING]

# Logging modules to check that the string format arguments are in logging
# function parameter format
logging-modules=logging


[MISCELLANEOUS]

# List of note tags to take in consideration, separated by a comma.
notes=FIXME,XXX,TODO


[SIMILARITIES]

# Minimum lines number of a similarity.
min-similarity-lines=4

# Ignore comments when computing similarities.
ignore-comments=yes

# Ignore docstrings when computing similarities.
ignore-docstrings=yes

# Ignore imports when computing similarities.
ignore-imports=no


[SPELLING]

# Spelling dictionary name. Available dictionaries: none. To make it working
# install python-enchant package.
spelling-dict=

# List of comma separated words that should not be checked.
spelling-ignore-words=

# A path to a file that contains private dictionary; one word per line.
spelling-private-dict-file=

# Tells whether to store unknown words to indicated private dictionary in
# --spelling-private-dict-file option instead of raising a message.
spelling-store-unknown-words=no


[TYPECHECK]

# Tells whether missing members accessed in mixin class should be ignored. A
# mixin class is detected if its name ends with "mixin" (case insensitive).
ignore-mixin-members=yes

# List of module names for which member attributes should not be checked
# (useful for modules/projects where namespaces are manipulated during runtime
# and thus existing member attributes cannot be deduced by static analysis. It
# supports qualified module names, as well as Unix pattern matching.
ignored-modules=

# List of class names for which member attributes should not be checked (useful
# for classes with dynamically set attributes). This supports the use of
# qualified names.
ignored-classes=optparse.Values,thread._local,_thread._local

# List of members which are set dynamically and missed by pylint inference
# system, and so shouldn't trigger E1101 when accessed. Python regular
# expressions are accepted.
generated-members=

# List of decorators that produce context managers, such as
# contextlib.contextmanager. Add to this list to register other decorators that
# produce valid context managers.
contextmanager-decorators=contextlib.contextmanager


[VARIABLES]

# Tells whether we should check for unused import in __init__ files.
init-import=no

# A regular expression matching the name of dummy variables (i.e. expectedly
# not used).
dummy-variables-rgx=(_+[a-zA-Z0-9]*?$)|dummy

# List of additional names supposed to be defined in builtins. Remember that
# you should avoid to define new builtins when possible.
additional-builtins=

# List of strings which can identify a callback function by name. A callback
# name must start or end with one of those strings.
callbacks=cb_,_cb

# List of qualified module names which can have objects that can redefine
# builtins.
redefining-builtins-modules=six.moves,future.builtins


[CLASSES]

# List of method names used to declare (i.e. assign) instance attributes.
defining-attr-methods=__init__,__new__,setUp

# List of valid names for the first argument in a class method.
valid-classmethod-first-arg=cls

# List of valid names for the first argument in a metaclass class method.
valid-metaclass-classmethod-first-arg=mcs

# List of member names, which should be excluded from the protected access
# warning.
exclude-protected=_asdict,_fields,_replace,_source,_make


[DESIGN]

# Maximum number of arguments for function / method
max-args=8

# Argument names that match this expression will be ignored. Default to name
# with leading underscore
ignored-argument-names=_.*

# Maximum number of locals for function / method body
max-locals=20

# Maximum number of return / yield for function / method body
max-returns=6

# Maximum number of branch for function / method body
max-branches=12

# Maximum number of statements in function / method body
max-statements=50

# Maximum number of parents for a class (see R0901).
max-parents=7

# Maximum number of attributes for a class (see R0902).
max-attributes=20

# Minimum number of public methods for a class (see R0903).
min-public-methods=1

# Maximum number of public methods for a class (see R0904).
max-public-methods=20

# Maximum number of boolean expressions in a if statement
max-bool-expr=5


[IMPORTS]

# Deprecated modules which should not be used, separated by a comma
deprecated-modules=regsub,TERMIOS,Bastion,rexec

# Create a graph of every (i.e. internal and external) dependencies in the
# given file (report RP0402 must not be disabled)
import-graph=

# Create a graph of external dependencies in the given file (report RP0402 must
# not be disabled)
ext-import-graph=

# Create a graph of internal dependencies in the given file (report RP0402 must
# not be disabled)
int-import-graph=

# Force import order to recognize a module as part of the standard
# compatibility libraries.
known-standard-library=

# Force import order to recognize a module as part of a third party library.
known-third-party=enchant

# Analyse import fallback blocks. This can be used to support both Python 2 and
# 3 compatible code, which means that the block might have code that exists
# only in one or another interpreter, leading to false positives when analysed.
analyse-fallback-blocks=no


[EXCEPTIONS]

# Exceptions that will emit a warning when being caught. Defaults to
# "Exception"
overgeneral-exceptions=Exception

-------------
